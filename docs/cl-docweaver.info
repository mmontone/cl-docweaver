This is cl-docweaver.info, produced by makeinfo version 6.7 from
cl-docweaver.weaved.texi.

Copyright (C) 2021 Mariano Montone

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with no Front-Cover Texts,
     and with no Back-Cover Texts.  A copy of the license is included in
     the section entitled "GNU Free Documentation License".
INFO-DIR-SECTION Common Lisp
START-INFO-DIR-ENTRY
* CL-DocWeaver: (cl-docweaver)Common Lisp documentation weaver.
END-INFO-DIR-ENTRY


File: cl-docweaver.info,  Node: Top,  Next: Introduction,  Up: (dir)

Top
***

_CL-DOCWEAVER_ is a document weaver for Common Lisp.

   Documentation for a Lisp project is written with the user's tool of
choice (like Texinfo, Markdown, etc).  Then, Common Lisp definitions are
expanded into the documentation source using DocWeaver commands.

* Menu:

* Introduction::
* Installation::
* Usage::
* Commands::
* Documentation systems::
* Tips and tricks::
* API::
* Index::


File: cl-docweaver.info,  Node: Introduction,  Next: Installation,  Prev: Top,  Up: Top

1 Introduction
**************

_CL-DOCWEAVER_ is a document weaver for Common Lisp.

   Documentation for a Lisp project is written with the user's tool of
choice (like Texinfo, Markdown, etc).  Then, Common Lisp definitions are
expanded into the documentation source using DocWeaver commands.

   DocWeaver commands give the user control on how definitions are to be
expanded, either via command options or by choosing a different set of
commands.

   _CL-DOCWEAVER_ is easy to extend to support different documentation
tools.

   Texinfo and Markdown are the ones with best support at this moment.


File: cl-docweaver.info,  Node: Installation,  Next: Usage,  Prev: Introduction,  Up: Top

2 Installation
**************


File: cl-docweaver.info,  Node: Usage,  Next: Commands,  Prev: Installation,  Up: Top

3 Usage
*******

Write documentation for your Common Lisp project in your documentation
tool of your choice (either Texinfo or Markdown at this moment).  Then
invoke _cl-docweaver_ commands to expand Lisp definitions for either
variables, functions, macros, classes, or even whole packages.

   Commands have the following syntax: (@command-name &rest args).

   For example, use '(@clfunction alexandria:flatten)' to expand the
definition of 'ALEXANDRIA:FLATTEN' function.

   The expanded function definition looks like this:

 -- ALEXANDRIA: FLATTEN (tree)

     Traverses the TREE in order, collecting non-null leaves into a
     list.

   Note that commands usually receive options in order to be able to
control different aspects of the expanded definition.

   By default, docstrings are interpreted to extract possible references
to other parts of the code; then those references are formatted as links
that can be used to navigate the definitions documentations.

   Finally, use *Note WEAVE-FILE: DOCWEAVER:WEAVE-FILE function.to weave
your documentation system source files.

   Have a look at _cl-docweaver_ documentation in 'docs' directory for
an example of how all this works.


File: cl-docweaver.info,  Node: Commands,  Next: Documentation systems,  Prev: Usage,  Up: Top

4 Commands
**********

 -- Command: @setup &rest options

     Configures _cl-docweaver_.

     OPTIONS is a _plist_ with members:

        * ':docsystem' The documentation system to use.  Either
          ':texinfo' or ':markdown'.  Default is ':texinfo'.

        * ':parse-docstrings' A boolean that indicates if docstrings
          should be parsed or not.  Default is T.

        * ':command-prefix' The prefix character to use for commands.
          Default is the '#\@' character.

 -- Command: @clvariable variable-symbol &rest args

     Expands definition for variable bound to VARIABLE-SYMBOL.

     For example,

     '(@clvariable cl:*standard-output*)'

     Expands to this:

      -- COMMON-LISP: *STANDARD-OUTPUT*

          default output stream

     A list of symbols is also accepted; variable definitions are
     expanded in sequence.

     For example,

     '(@clvariable (cl:*compile-print* cl:*compile-verbose*))'

     expands to this:

      -- COMMON-LISP: *COMPILE-PRINT*

          The default for the :PRINT argument to *Note COMPILE-FILE:
          COMMON-LISP:COMPILE-FILE function.
      -- COMMON-LISP: *COMPILE-VERBOSE*

          The default for the :VERBOSE argument to *Note COMPILE-FILE:
          COMMON-LISP:COMPILE-FILE function.

 -- Command: @clfunction function-symbol &rest args

     Expands definition for function bound to FUNCTION-SYMBOL.

     For example,

     '(@clfunction alexandria:map-permutations)'

     Expands to this:

      -- ALEXANDRIA: MAP-PERMUTATIONS (function sequence &key (start 0)
               end length (copy t))

          Calls FUNCTION with each permutation of LENGTH constructable
          from the subsequence of SEQUENCE delimited by START and END.
          START
          defaults to 0, END to LENGTH of the SEQUENCE, and LENGTH to
          the
          LENGTH of the delimited subsequence.

     Like with *Note @clvariable::, a list of symbols is also accepted
     and definitions are expanded in sequence.

 -- Command: @clpackage package-name &key (include-external-definitions
          t) include-internal-definitions (categorized t)

     Expands definition for Common Lisp package named PACKAGE-NAME.

     If INCLUDE-EXTERNAL-DEFINITIONS is 'T', then all package external
     definitions are expanded.

     If INCLUDE-INTERNAL-DEFINITIONS is 'T', then all package internals
     definitions are expanded.

     If CATEGORIZED is 'T', then package definitions appear categorized
     in sections (variables, functions, etc).

     Example:

     '(@clpackage :alexandria)'

 -- Command: @clref symbol type

     Creates a reference to SYMBOL.  TYPE should be one of 'variable',
     'function', 'class', etc.

     For example, to reference ALEXANDRIA:FLATTEN function, do this:

     '(@clref alexandria:flatten function)'

     And this is the resulting link: *Note FLATTEN: ALEXANDRIA:FLATTEN
     function.


File: cl-docweaver.info,  Node: Documentation systems,  Next: Tips and tricks,  Prev: Commands,  Up: Top

5 Documentation systems
***********************

* Menu:

* Texinfo::


File: cl-docweaver.info,  Node: Texinfo,  Up: Documentation systems

5.1 Texinfo
===========

The Texinfo output needs to include 'common-lisp.texi' file, that is
shipped with _CL-DOCWEAVER_.

   The 'common-lisp.texi' file contains a set of Texinfo macros that are
used by _CL-DOCWEAVER_ for expanding Common Lisp definitons.

   You can have a look at _CL-DOCWEAVER_ own documentation in
'docs/cl-docweaver.texi' for an example for how this should be used.

   Also you may want to invoke 'makeinfo' and 'texi2any' Texinfo
commands with '--no-validate' option, as some of the generated
references in docstrings may not appear in your final document, and
without that option you would get an error.

   See 'docs/Makefile' in _CL-DOCWEAVER_ source for an example of how
Texinfo tools should be used.


File: cl-docweaver.info,  Node: Tips and tricks,  Next: API,  Prev: Documentation systems,  Up: Top

6 Tips and tricks
*****************

* Menu:

* Lisp evaluation::


File: cl-docweaver.info,  Node: Lisp evaluation,  Up: Tips and tricks

6.1 Lisp evaluation
===================

It is possible to take advantage of Lisp evaluation to handle the list
of symbols to expand.  As commands are parsed using standard 'CL:READ'
function, reader syntax '#.' can be used to evaluate arbitrary Lisp
code.

 -- COMMON-LISP: READ (&optional (stream *standard-input*)
          (sb-impl::eof-error-p t) (sb-impl::eof-value nil)
          (sb-impl::recursive-p nil))

     Read the next Lisp value from STREAM, and return it.

   We can take advantage of that and expand all functions that match
some term.

Symbols matching
================

For example, to expand all functions in 'CL' package that have 'file' in
their name:

   '(@clfunction #.(docweaver/utils:symbols-matching :cl "FILE"
:function))'

   Results in this expansion:

 -- COMMON-LISP: PROBE-FILE (sb-impl::pathspec)

     Return the truename of PATHSPEC if the truename can be found,
     or NIL otherwise.  See *Note TRUENAME: COMMON-LISP:TRUENAME
     function. for more information.
 -- COMMON-LISP: FILE-AUTHOR (sb-impl::pathspec)

     Return the author of the file specified by PATHSPEC.  Signal an
     error of type if no such file exists, or if PATHSPEC
     is a wild pathname.
 -- COMMON-LISP: RENAME-FILE (sb-impl::file sb-impl::new-name)

     Rename FILE to have the specified NEW-NAME.  If FILE is a stream
     open to a
     FILE, then the associated FILE is renamed.
 -- COMMON-LISP: FILE-LENGTH (stream)

 -- COMMON-LISP: FILE-POSITION (stream &optional position)

 -- COMMON-LISP: FILE-NAMESTRING (pathname)

     Return a string representation of the name in PATHNAME.
 -- COMMON-LISP: DELETE-FILE (sb-impl::file)

     Delete the specified FILE.

     If FILE is a stream, on Windows the stream is closed immediately.
     On Unix
     platforms the stream remains open, allowing IO to continue: the OS
     resources
     associated with the deleted FILE remain available till the stream
     is closed as
     per standard Unix unlink() behaviour.
 -- COMMON-LISP: COMPILE-FILE-PATHNAME (sb-c::input-file &key
          (sb-c::output-file nil sb-c::output-file-p) &allow-other-keys)

     Return a pathname describing what file *Note COMPILE-FILE:
     COMMON-LISP:COMPILE-FILE function. would write to given
     these arguments.
 -- COMMON-LISP: COMPILE-FILE (sb-c::input-file &key (sb-c::output-file
          (sb-c::cfp-output-file-default sb-c::input-file)) ((:verbose
          *compile-verbose*) *compile-verbose*) ((:print
          *compile-print*) *compile-print*) (sb-c::external-format
          :default) (sb-c::trace-file nil) ((:block-compile
          sb-c::*block-compile-arg*) nil) (sb-c::emit-cfasl
          sb-c::*emit-cfasl*))

     Compile INPUT-FILE, producing a corresponding fasl file and
     returning its filename.

     :PRINT
     If true, a message per non-macroexpanded top level form is printed
     to *Note *STANDARD-OUTPUT*: COMMON-LISP:*STANDARD-OUTPUT* variable.
     Top level forms that whose subforms are
     processed as top level forms (eg.  *Note EVAL-WHEN:
     COMMON-LISP:EVAL-WHEN function, *Note MACROLET:
     COMMON-LISP:MACROLET function, *Note PROGN: COMMON-LISP:PROGN
     function.) receive
     no such message, but their subforms do.

     As an extension to ANSI, if :PRINT is :TOP-LEVEL-FORMS, a message
     per top level form after macroexpansion is printed to *Note
     *STANDARD-OUTPUT*: COMMON-LISP:*STANDARD-OUTPUT* variable.
     For example, compiling an *Note IN-PACKAGE: COMMON-LISP:IN-PACKAGE
     function. form will result in a message about
     a top level *Note SETQ: COMMON-LISP:SETQ function. in addition to
     the message about the *Note IN-PACKAGE: COMMON-LISP:IN-PACKAGE
     function. form'
     itself.

     Both forms of reporting obey the *Note
     SB-EXT:*COMPILER-PRINT-VARIABLE-ALIST*:
     SB-EXT:SB-EXT:*COMPILER-PRINT-VARIABLE-ALIST* variable.

     :BLOCK-COMPILE
     Though *Note COMPILE-FILE: COMMON-LISP:COMPILE-FILE function.
     accepts an additional :BLOCK-COMPILE
     argument, it is not currently supported.  (non-standard)

     :TRACE-FILE
     If given, internal data structures are dumped to the specified
     file, or if a value of is given, to a file of *Note *:
     COMMON-LISP:* function.trace type
     derived from the input file name.  (non-standard)

     :EMIT-CFASL
     (Experimental).  If true, outputs the toplevel compile-time effects
     of this file into a separate .cfasl file.
 -- COMMON-LISP: FILE-ERROR-PATHNAME (condition)

 -- COMMON-LISP: FILE-WRITE-DATE (sb-impl::pathspec)

     Return the write date of the file specified by PATHSPEC.
     An error of type is signaled if no such file exists,
     or if PATHSPEC is a wild pathname.
 -- COMMON-LISP: FILE-STRING-LENGTH (stream sb-impl::object)

Categorized definitions
=======================

We can also go a bit further and use evaluation to fetch a list of
symbols with docstrings matching a certain category.  When the syntax
'Category: <category-name>' is used in definition docstrings, it is
detected by *Note docweaver/utils:symbols-categorized::.

   For example:

   '(@clfunction #.(docweaver/utils:symbols-categorized :docweaver/utils
"foobar" :function))'

   Expands the categorized functions:

 -- DOCWEAVER/UTILS: BAR nil

     *Note BAR: DOCWEAVER/UTILS:BAR function. function.

     Category: foobar.
 -- DOCWEAVER/UTILS: FOO nil

     *Note FOO: DOCWEAVER/UTILS:FOO function. function.

     Category: foobar.


File: cl-docweaver.info,  Node: API,  Next: Index,  Prev: Tips and tricks,  Up: Top

7 API
*****

 -- PACKAGE: DOCWEAVER

External definitions
====================

Functions
=========

 -- DOCWEAVER: WEAVE-FILE (file output-file &rest options &key docsystem
          modules command-prefix (parse-docstrings t))

     Weaves documentation source in FILE and writes the result to
     OUTPUT-FILE.

     Arguments:

     - DOCSYSTEM: specify the documentation tool that is being used
     (:TEXINFO, :MARKDOWN, etc.).
     - MODULES: is the list of MODULES (or ASDF system names) that need
     to be loaded to be able to read definition descriptions.
     - COMMAND-PREFIX: is the character to use as prefix for commands.
     The character 'at' is the default.
     - PARSE-DOCSTRINGS: if T, then docstings are parsed and highlighted
     and references to code from it created.


File: cl-docweaver.info,  Node: Index,  Prev: API,  Up: Top

8 Index
*******

 [index ]
* Menu:

* cl-docweaver:                          Top.                   (line 6)
* docweaver:                             Top.                   (line 6)

 [index ]
* Menu:

* *COMPILE-PRINT*:                       Commands.             (line 44)
* *COMPILE-VERBOSE*:                     Commands.             (line 48)
* *STANDARD-OUTPUT*:                     Commands.             (line 31)
* COMMON-LISP:*COMPILE-PRINT*:           Commands.             (line 44)
* COMMON-LISP:*COMPILE-VERBOSE*:         Commands.             (line 48)
* COMMON-LISP:*STANDARD-OUTPUT*:         Commands.             (line 31)

 [index ]
* Menu:

* @clfunction:                           Commands.            (line  53)
* @clpackage:                            Commands.            (line  76)
* @clref:                                Commands.            (line  94)
* @clvariable:                           Commands.            (line  21)
* @setup:                                Commands.            (line   6)
* ALEXANDRIA:FLATTEN:                    Usage.               (line  18)
* ALEXANDRIA:MAP-PERMUTATIONS:           Commands.            (line  63)
* BAR:                                   Lisp evaluation.     (line 143)
* COMMON-LISP:COMPILE-FILE:              Lisp evaluation.     (line  70)
* COMMON-LISP:COMPILE-FILE-PATHNAME:     Lisp evaluation.     (line  64)
* COMMON-LISP:DELETE-FILE:               Lisp evaluation.     (line  53)
* COMMON-LISP:FILE-AUTHOR:               Lisp evaluation.     (line  36)
* COMMON-LISP:FILE-ERROR-PATHNAME:       Lisp evaluation.     (line 119)
* COMMON-LISP:FILE-LENGTH:               Lisp evaluation.     (line  46)
* COMMON-LISP:FILE-NAMESTRING:           Lisp evaluation.     (line  50)
* COMMON-LISP:FILE-POSITION:             Lisp evaluation.     (line  48)
* COMMON-LISP:FILE-STRING-LENGTH:        Lisp evaluation.     (line 126)
* COMMON-LISP:FILE-WRITE-DATE:           Lisp evaluation.     (line 121)
* COMMON-LISP:PROBE-FILE:                Lisp evaluation.     (line  31)
* COMMON-LISP:READ:                      Lisp evaluation.     (line  11)
* COMMON-LISP:RENAME-FILE:               Lisp evaluation.     (line  41)
* COMPILE-FILE:                          Lisp evaluation.     (line  70)
* COMPILE-FILE-PATHNAME:                 Lisp evaluation.     (line  64)
* DELETE-FILE:                           Lisp evaluation.     (line  53)
* DOCWEAVER/UTILS:BAR:                   Lisp evaluation.     (line 143)
* DOCWEAVER/UTILS:FOO:                   Lisp evaluation.     (line 148)
* DOCWEAVER:WEAVE-FILE:                  API.                 (line  14)
* FILE-AUTHOR:                           Lisp evaluation.     (line  36)
* FILE-ERROR-PATHNAME:                   Lisp evaluation.     (line 119)
* FILE-LENGTH:                           Lisp evaluation.     (line  46)
* FILE-NAMESTRING:                       Lisp evaluation.     (line  50)
* FILE-POSITION:                         Lisp evaluation.     (line  48)
* FILE-STRING-LENGTH:                    Lisp evaluation.     (line 126)
* FILE-WRITE-DATE:                       Lisp evaluation.     (line 121)
* FLATTEN:                               Usage.               (line  18)
* FOO:                                   Lisp evaluation.     (line 148)
* MAP-PERMUTATIONS:                      Commands.            (line  63)
* PROBE-FILE:                            Lisp evaluation.     (line  31)
* READ:                                  Lisp evaluation.     (line  11)
* RENAME-FILE:                           Lisp evaluation.     (line  41)
* WEAVE-FILE:                            API.                 (line  14)



Tag Table:
Node: Top671
Node: Introduction1147
Ref: introduction1269
Node: Installation1839
Ref: installation1963
Node: Usage1963
Ref: usage2069
Ref: ALEXANDRIA:FLATTEN function2581
Node: Commands3245
Ref: commands3366
Ref: COMMON-LISP:*STANDARD-OUTPUT* variable4036
Ref: COMMON-LISP:*COMPILE-PRINT* variable4310
Ref: COMMON-LISP:*COMPILE-VERBOSE* variable4463
Ref: ALEXANDRIA:MAP-PERMUTATIONS function4830
Node: Documentation systems6260
Node: Texinfo6439
Node: Tips and tricks7243
Node: Lisp evaluation7413
Ref: COMMON-LISP:READ function7744
Ref: COMMON-LISP:PROBE-FILE function8272
Ref: COMMON-LISP:FILE-AUTHOR function8490
Ref: COMMON-LISP:RENAME-FILE function8692
Ref: COMMON-LISP:FILE-LENGTH function8889
Ref: COMMON-LISP:FILE-POSITION function8928
Ref: COMMON-LISP:FILE-NAMESTRING function8988
Ref: COMMON-LISP:DELETE-FILE function9094
Ref: COMMON-LISP:COMPILE-FILE-PATHNAME function9476
Ref: COMMON-LISP:COMPILE-FILE function9759
Ref: COMMON-LISP:FILE-ERROR-PATHNAME function11939
Ref: COMMON-LISP:FILE-WRITE-DATE function11989
Ref: COMMON-LISP:FILE-STRING-LENGTH function12203
Ref: DOCWEAVER/UTILS:BAR function12729
Ref: DOCWEAVER/UTILS:FOO function12839
Node: API12950
Ref: api13050
Ref: DOCWEAVER:WEAVE-FILE function13138
Node: Index13835

End Tag Table
