\input texinfo   @c -*-texinfo-*-
@comment $Id@w{$}
@comment %**start of header
@settitle Common Lisp Documentation Weaver
@syncodeindex pg cp
@setfilename cl-docweaver.info
@include ../common-lisp.texi

@copying

Copyright @copyright{} 2021 Mariano Montone

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying


@dircategory Common Lisp
@direntry
* CL-DocWeaver: (cl-docweaver)Common Lisp documentation weaver.
@end direntry

@titlepage
@title Common Lisp Documentation Weaver

@c Setup cl-docweaver
(@setup :command-prefix #\$ :docsystem :texinfo)

@author Mariano Montone (@email{marianomontone@@gmail.com})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Top
@cindex docweaver
@cindex cl-docweaver

@emph{CL-DOCWEAVER} is a document weaver for Common Lisp.

Documentation for a Lisp project is written with the user's tool of choice (like Texinfo, Markdown, etc). Then, Common Lisp definitions are expanded into the documentation source using DocWeaver commands.

@menu
* Introduction::
* Installation::
* Usage::
* Commands::
* Documentation systems::
* Tips and tricks::
* API::
* Index::
@end menu

@node Introduction
@chapter Introduction
@anchor{introduction}

@emph{CL-DOCWEAVER} is a document weaver for Common Lisp.

Documentation for a Lisp project is written with the user's tool of choice (like Texinfo, Markdown, etc). Then, Common Lisp definitions are expanded into the documentation source using DocWeaver commands.

DocWeaver commands give the user control on how definitions are to be expanded, either via command options or by choosing a different set of commands.

@emph{CL-DOCWEAVER} is easy to extend to support different documentation tools.

Texinfo and Markdown are the ones with best support at this moment.

@node Installation
@chapter Installation
@anchor{installation}


@node Usage
@chapter Usage
@anchor{usage}

Write documentation for your Common Lisp project in your documentation tool of your choice (either Texinfo or Markdown at this moment). Then invoke @emph{cl-docweaver} commands to expand Lisp definitions for either variables, functions, macros, classes, or even whole packages.

Commands have the following syntax: @verb{|(@command-name &rest args)|}.

For example, use @code{(@@clfunction alexandria:flatten)} to expand the definition of @code{ALEXANDRIA:FLATTEN} function.

The expanded function definition looks like this:

($clfunction alexandria:flatten)

Note that commands usually receive options in order to be able to control different aspects of the expanded definition.

By default, docstrings are interpreted to extract possible references to other parts of the code; then those references are formatted as links that can be used to navigate the definitions documentations.

Finally, use ($clref docweaver:weave-file :function) to weave your documentation system source files.

Have a look at @emph{cl-docweaver} documentation in @code{docs} directory for an example of how all this works.

@node Command Line
@section Command Line

The @code{cl-docweaver} executable can be used weave documents from the command line.

To build, do:

@example
make
sudo make install
@end example

Then use it like this:

@example
cl-docweaver - Common Lisp Documentation Weaver

USAGE: cl-docweaver [OPTIONS] INPUTFILE

Weave Common Lisp documentation in INPUTFILE.

Options:
  --version             display version information and exit
  -h, --help            display help information and exit
  -o FILE, --output FILE
                        output file
  -s DOCSYSTEM, --docsystem DOCSYSTEM
                        the documentation system to use. either texinfo or
                        markdown. if not specified, the documentation system
                        used is inferred by looking at input file extension.

Examples:

  Weave texinfo file and visualize weaved output

      cl-docweaver my-documentation.texi

  Weave texinfo file into a file

      cl-docweaver my-documentation.texi -o my-documentation.weaved.texi
@end example

@node Commands
@chapter Commands
@anchor{commands}

@deffn Command @@setup &rest options

Configures @emph{cl-docweaver}.

@var{OPTIONS} is a @emph{plist} with members:

@itemize @bullet

@item @code{:docsystem}
The documentation system to use. Either @code{:texinfo} or @code{:markdown}.
Default is @code{:texinfo}.

@item @code{:parse-docstrings}
A boolean that indicates if docstrings should be parsed or not.
Default is T.

@item @code{:command-prefix}
The prefix character to use for commands.
Default is the @code{#\@@} character.

@end itemize

@end deffn

@deffn Command @@clvariable variable-symbol &rest args

Expands definition for variable bound to @var{VARIABLE-SYMBOL}.

For example,

@code{(@@clvariable cl:*standard-output*)}

Expands to this:

($clvariable cl:*standard-output*)

A list of symbols is also accepted; variable definitions are expanded in sequence.

For example,

@code{(@@clvariable (cl:*compile-print* cl:*compile-verbose*))}

expands to this:

($clvariable (cl:*compile-print* cl:*compile-verbose*))

@end deffn

@deffn Command @@clfunction function-symbol &rest args

Expands definition for function bound to @var{FUNCTION-SYMBOL}.

For example,

@code{(@@clfunction alexandria:map-permutations)}

Expands to this:

($clfunction alexandria:map-permutations)

Like with @xref{@@clvariable}, a list of symbols is also accepted and definitions are expanded in sequence.

@end deffn

@deffn Command @@clpackage package-name &key (include-external-definitions t) include-internal-definitions (categorized t)

Expands definition for Common Lisp package named @var{PACKAGE-NAME}.

If @var{INCLUDE-EXTERNAL-DEFINITIONS} is @code{T}, then all package external definitions are expanded.

If @var{INCLUDE-INTERNAL-DEFINITIONS} is @code{T}, then all package internals definitions are expanded.

@var{CATEGORIZED} controls how to categorize the expanded package definitions:

@itemize
@item @var{:by-kind} or @var{T}, definitions are separated in sections (variables, functions, etc).
@item @var{:by-docstring-category}, definitions are grouped by the category parsed from docstrings. A category for a definition is specified by adding the text ``Category: @emph{category-name}'' to the docstring.
@item Otherwise, they are expanded in sequence with no separation.
@end itemize

Example:

@code{(@@clpackage :alexandria)}

@end deffn

@deffn Command @@clref symbol type

Creates a reference to @var{SYMBOL}. @var{TYPE} should be one of @code{variable}, @code{function}, @code{class}, etc.

For example, to reference ALEXANDRIA:FLATTEN function, do this:

@code{(@@clref alexandria:flatten function)}

And this is the resulting link: ($clref alexandria:flatten function)

@end deffn

@node Documentation systems
@chapter Documentation systems

@node Texinfo
@section Texinfo

The Texinfo output needs to include @code{common-lisp.texi} file, that is shipped with @emph{CL-DOCWEAVER}.

The @code{common-lisp.texi} file contains a set of Texinfo macros that are used by @emph{CL-DOCWEAVER} for expanding Common Lisp definitons.

You can have a look at @emph{CL-DOCWEAVER} own documentation in @code{docs/cl-docweaver.texi} for an example for how this should be used.

Also you may want to invoke @code{makeinfo} and @code{texi2any} Texinfo commands with @code{--no-validate} option, as some of the generated references in docstrings may not appear in your final document, and without that option you would get an error.

See @code{docs/Makefile} in @emph{CL-DOCWEAVER} source for an example of how Texinfo tools should be used.

@node common-lisp.texi
@subsection common-lisp.texi

@code{common-lisp.texi} file contains macros for defining Common Lisp related definitions.

They are mostly equivalent to Texinfo's definition macros, like @code{@@deffn}, @code{@@defun}, etc, but for Common Lisp. In particular, they take into consideration Lisp packages, and uses them for naming and index entries.

@code{@@cldefun} is for defining a Common Lisp function.

They are used like this:

@example
@verbatim
@cldefun{alexandria, flatten, ()}
Traverses the @var{tree} in order, collecting non-null leaves into a list. 
@endcldefun
@end verbatim
@end example

You can use the macros in @code{common-lisp.texi} to define your own Common Lisp definitions manually, without using CL-DOCWEAVER expanders.

Have a look at the source to figure out more about how they are used:

@verbatiminclude ../common-lisp.texi

The @code{common-lisp.texi} file is required to be included in the file being weaved by CL-DOCWEAVER for the Texinfo documentation system, as the implementation expands to macros found in @code{common-lisp.texi}.

@node Tips and tricks
@chapter Tips and tricks

@node Lisp evaluation
@section Lisp evaluation

It is possible to take advantage of Lisp evaluation to handle the list of symbols to expand. As commands are parsed using standard @code{CL:READ} function, reader syntax @code{#.} can be used to evaluate arbitrary Lisp code.

($clfunction cl:read)

We can take advantage of that and expand all functions that match some term.

@heading Symbols matching

For example, to expand all functions in @code{CL} package that have 'file' in their name:

@code{(@@clfunction #.(docweaver/utils:symbols-matching :cl "FILE" :function))}

Results in this expansion:

($clfunction #.(docweaver/utils:symbols-matching :cl "FILE" :function))

@heading Categorized definitions

We can also go a bit further and use evaluation to fetch a list of symbols with docstrings matching a certain category. When the syntax @code{Category: <category-name>} is used in definition docstrings, it is detected by @xref{docweaver/utils:symbols-categorized}.

For example:

@code{(@@clfunction #.(docweaver/utils:symbols-categorized :docweaver/utils "foobar" :function))}

Expands the categorized functions:

($clfunction #.(docweaver/utils:symbols-categorized :docweaver/utils "foobar" :function))

@node API
@chapter API
@anchor{api}

($clpackage :docweaver)

@node Index
@chapter Index

@printindex cp
@printindex vr
@printindex fn

@bye
