\input texinfo   @c -*-texinfo-*-
@comment $Id@w{$}
@comment %**start of header
@settitle Common Lisp Documentation Weaver
@syncodeindex pg cp
@setfilename cl-docweaver.info
@include ../common-lisp.texi

@copying

Copyright @copyright{} 2021 Mariano Montone

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying


@dircategory Common Lisp
@direntry
* CL-DocWeaver: (cl-docweaver)Common Lisp documentation weaver.
@end direntry

@titlepage
@title Common Lisp Documentation Weaver

@c Setup cl-docweaver
(@setup :command-prefix #\$ :docsystem :texinfo)

@author Mariano Montone (@email{marianomontone@@gmail.com})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Top
@cindex docweaver
@cindex cl-docweaver

CL-DOCWEAVER is a document weaver for Common Lisp.

Documentation for a Lisp project can be written using (potentially) any tool choosen by the user (like Texinfo, Markdown, etc). Then, Common Lisp definitions are referenced and embedded from the documentation source using weaving commands.

@menu
* Introduction::
* Installation::
* Usage::
* Commands::
* API::
* Index::
@end menu

@node Introduction
@chapter Introduction
@anchor{introduction}

CL-DOCWEAVER is a document weaver for Common Lisp.

Documentation for a Lisp project is written with the user's tool of choice (like Texinfo, Markdown, etc). Then, Common Lisp definitions are expanded into the documentation source using DocWeaver commands.

DOCWEAVER commands give the user control on how definitions are to be expanded, either via command options or by choosing a different set of commands.

CL-DOCWEAVER is easy to extend to support different documentation tools.

Texinfo and Markdown are the ones with best support at this moment.

@node Installation
@chapter Installation
@anchor{installation}


@node Usage
@chapter Usage
@anchor{usage}

First choose your documentation system (either Texinfo or Markdown at this moment).

Write your documentation as you normally would for the chosen documentation system; then, whenever you need to reference to something in your Common Lisp system, use DocWeaver commands to expand Lisp definitions.

Commands have the following syntax: @verb{|(@command-name &rest args)|}.

For example, use @verb{|(@clfunction alexandria:flatten)|} to expand the definition of @code{ALEXANDRIA:FLATTEN} function.

That looks like this:

($clfunction alexandria:flatten)

Note that commands usually receive options in order to be able to control different aspects of the expanded definition.

By default, docstrings are parsed to extract possible references to other parts of the code; then those references are formatted as links that can be used to navigate the source code.

Finally, use ($clref docweaver:weave-file :function) to weave your documentation system source files.

@node Commands
@chapter Commands
@anchor{commands}

@deffn Command @@clvariable (function-symbol &rest args)

Expands definition for variable bound to FUNCTION-SYMBOL.

For example,

@code{(@@clvariable cl:*standard-output*)}

Looks like this:

($clvariable cl:*standard-output*)

@end deffn

@deffn Command @@clfunction (function-symbol &rest args)

Expands definition for function bound to FUNCTION-SYMBOL.

For example,

@code{(@@clfunction alexandria:map-permutations)}

Looks like this:

($clfunction alexandria:map-permutations)

@end deffn

@deffn Command @@clpackage (package-name &key (include-external-definitions t) include-internal-definitions (categorized t))

Displays PACKAGE-NAME package description.

If INCLUDE-EXTERNAL-DEFINITIONS is T, then all package external definitions are shown.

If INCLUDE-INTERNAL-DEFINITIONS is T, then all package internals definitions are shown.

If CATEGORIZED is T, then definitions appear categorized in sections (variables, functions, etc).

Example:

@code{(@@clpackage :alexandria)}

@end deffn

@deffn Command @@clref (symbol type)

Creates a reference to SYMBOL. TYPE should be one of 'variable', 'function', 'class', etc.

Example:

@code{(@@clref alexandria:flatten, function)}

@end deffn

@node API
@chapter API
@anchor{api}

($clpackage :docweaver)

@node Index
@chapter Index

@printindex cp
@printindex vr
@printindex fn

@bye
