\input texinfo   @c -*-texinfo-*-
@comment $Id@w{$}
@comment %**start of header
@settitle Common Lisp Documentation Weaver
@syncodeindex pg cp
@setfilename cl-docweaver.info
@include ../common-lisp.texi

@copying

Copyright @copyright{} 2021 Mariano Montone

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying


@dircategory Common Lisp
@direntry
* CL-DocWeaver: (cl-docweaver)Common Lisp documentation weaver.
@end direntry

@titlepage
@title Common Lisp Documentation Weaver

@c Setup cl-docweaver
(@setup :command-prefix #\$ :docsystem :texinfo)

@author Mariano Montone (@email{marianomontone@@gmail.com})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Top
@cindex docweaver
@cindex cl-docweaver

@emph{CL-DOCWEAVER} is a document weaver for Common Lisp.

Documentation for a Lisp project is written with the user's tool of choice (like Texinfo, Markdown, etc). Then, Common Lisp definitions are expanded into the documentation source using DocWeaver commands.

@menu
* Introduction::
* Installation::
* Usage::
* Commands::
* Documentation systems::
* API::
* Index::
@end menu

@node Introduction
@chapter Introduction
@anchor{introduction}

@emph{CL-DOCWEAVER} is a document weaver for Common Lisp.

Documentation for a Lisp project is written with the user's tool of choice (like Texinfo, Markdown, etc). Then, Common Lisp definitions are expanded into the documentation source using DocWeaver commands.

DocWeaver commands give the user control on how definitions are to be expanded, either via command options or by choosing a different set of commands.

@emph{CL-DOCWEAVER} is easy to extend to support different documentation tools.

Texinfo and Markdown are the ones with best support at this moment.

@node Installation
@chapter Installation
@anchor{installation}


@node Usage
@chapter Usage
@anchor{usage}

Write documentation for your Common Lisp project in your documentation tool of your choice (either Texinfo or Markdown at this moment). Then invoke @emph{cl-docweaver} commands to expand Lisp definitions for either variables, functions, macros, classes, or even whole packages.

Commands have the following syntax: @verb{|(@command-name &rest args)|}.

For example, use @code{(@@clfunction alexandria:flatten)} to expand the definition of @code{ALEXANDRIA:FLATTEN} function.

The expanded function definition looks like this:

($clfunction alexandria:flatten)

Note that commands usually receive options in order to be able to control different aspects of the expanded definition.

By default, docstrings are interpreted to extract possible references to other parts of the code; then those references are formatted as links that can be used to navigate the definitions documentations.

Finally, use ($clref docweaver:weave-file :function) to weave your documentation system source files.

Have a look at @emph{cl-docweaver} documentation in @code{docs} directory for an example of how all this works.

@node Commands
@chapter Commands
@anchor{commands}

@deffn Command @@setup (&rest options)

Configures @emph{cl-docweaver}.

@var{OPTIONS} is a @emph{plist} with members:

@itemize @bullet

@item @code{:docsystem}
The documentation system to use. Either @code{:texinfo} or @code{:markdown}.
Default is @code{:texinfo}.

@item @code{:parse-docstrings}
A boolean that indicates if docstrings should be parsed or not.
Default is T.

@item @code{:command-prefix}
The prefix character to use for commands.
Default is the @code{#\@@} character.

@end itemize

@end deffn

@deffn Command @@clvariable (function-symbol &rest args)

Expands definition for variable bound to FUNCTION-SYMBOL.

For example,

@code{(@@clvariable cl:*standard-output*)}

Looks like this:

($clvariable cl:*standard-output*)

@end deffn

@deffn Command @@clfunction (function-symbol &rest args)

Expands definition for function bound to @var{FUNCTION-SYMBOL}.

For example,

@code{(@@clfunction alexandria:map-permutations)}

Looks like this:

($clfunction alexandria:map-permutations)

@end deffn

@deffn Command @@clpackage (package-name &key (include-external-definitions t) include-internal-definitions (categorized t))

Expands definition for Common Lisp package named @var{PACKAGE-NAME}.

If @var{INCLUDE-EXTERNAL-DEFINITIONS} is @code{T}, then all package external definitions are expanded.

If @var{INCLUDE-INTERNAL-DEFINITIONS} is @code{T}, then all package internals definitions are expanded.

If @var{CATEGORIZED} is @code{T}, then package definitions appear categorized in sections (variables, functions, etc).

Example:

@code{(@@clpackage :alexandria)}

@end deffn

@deffn Command @@clref (symbol type)

Creates a reference to @var{SYMBOL}. @var{TYPE} should be one of @code{variable}, @code{function}, @code{class}, etc.

For example, to reference ALEXANDRIA:FLATTEN function, do this:

@code{(@@clref alexandria:flatten function)}

And this is the resulting link: ($clref alexandria:flatten function)

@end deffn

@node Documentation systems
@chapter Documentation systems

@node Texinfo
@section Texinfo

The Texinfo output needs to include @code{common-lisp.texi} file, that is shipped with @emph{CL-DOCWEAVER}.

The @code{common-lisp.texi} file contains a set of Texinfo macros that are used by @emph{CL-DOCWEAVER} for expanding Common Lisp definitons.

You can have a look at @emph{CL-DOCWEAVER} own documentation in @code{docs/cl-docweaver.texi} for an example for how this should be used.

Also you may want to invoke @code{makeinfo} and @code{texi2any} Texinfo commands with @code{--no-validate} option, as some of the generated references in docstrings may not appear in your final document, and without that option you would get an error.

See @code{docs/Makefile} in @emph{CL-DOCWEAVER} source for an example of how Texinfo tools should be used.

@node API
@chapter API
@anchor{api}

($clpackage :docweaver)

@node Index
@chapter Index

@printindex cp
@printindex vr
@printindex fn

@bye
